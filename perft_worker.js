(()=>{"use strict";var e,t,n,r,o={448:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var r=n(798),o=e([r]);r=(o.then?(await o)():o)[0],addEventListener("message",(e=>{const{fen:t,depth:n,chess960:o}=e.data,a=new r.kP(t,o),i=(0,r.q1)(a,n);a.free(),postMessage(i)})),postMessage(null),t()}catch(e){t(e)}}))},798:(e,t,n)=>{n.a(e,(async(r,o)=>{try{n.d(t,{Ih:()=>$,Or:()=>D,gk:()=>B,h4:()=>U,hd:()=>P,kP:()=>q,q1:()=>T,t$:()=>I,ug:()=>L,yq:()=>M});var a=n(328);e=n.hmd(e);var i=r([a]);a=(i.then?(await i)():i)[0];let _=new("undefined"==typeof TextDecoder?(0,e.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});_.decode();let c=new Uint8Array;function s(){return 0===c.byteLength&&(c=new Uint8Array(a.memory.buffer)),c}function d(e,t){return _.decode(s().subarray(e,e+t))}const u=new Array(32).fill(void 0);u.push(void 0,null,!0,!1);let f=u.length;function p(e){f===u.length&&u.push(u.length+1);const t=f;return f=u[t],u[t]=e,t}function l(e){return u[e]}function w(e){e<36||(u[e]=f,f=e)}function b(e){const t=l(e);return w(e),t}let h=0,y=new("undefined"==typeof TextEncoder?(0,e.require)("util").TextEncoder:TextEncoder)("utf-8");const g="function"==typeof y.encodeInto?function(e,t){return y.encodeInto(e,t)}:function(e,t){const n=y.encode(e);return t.set(n),{read:e.length,written:n.length}};function m(e,t,n){if(void 0===n){const n=y.encode(e),r=t(n.length);return s().subarray(r,r+n.length).set(n),h=n.length,r}let r=e.length,o=t(r);const a=s();let i=0;for(;i<r;i++){const t=e.charCodeAt(i);if(t>127)break;a[o+i]=t}if(i!==r){0!==i&&(e=e.slice(i)),o=n(o,r,r=i+3*e.length);const t=s().subarray(o+i,o+r);i+=g(e,t).written}return h=i,o}function v(e){return null==e}let k=new Int32Array;function x(){return 0===k.byteLength&&(k=new Int32Array(a.memory.buffer)),k}let E=new Uint32Array;function S(e,t){const n=(0===E.byteLength&&(E=new Uint32Array(a.memory.buffer)),E).subarray(e/4,e/4+t),r=[];for(let e=0;e<n.length;e++)r.push(b(n[e]));return r}function A(e,t){if(!(e instanceof t))throw new Error(`expected instance of ${t.name}`);return e.ptr}const j=new Uint32Array(2),O=new BigUint64Array(j.buffer);function T(e,t){try{const o=a.__wbindgen_add_to_stack_pointer(-16);A(e,q),a.perft(o,e.ptr,t);var n=x()[o/4+0],r=x()[o/4+1];return j[0]=n,j[1]=r,O[0]}finally{a.__wbindgen_add_to_stack_pointer(16)}}class q{static __wrap(e){const t=Object.create(q.prototype);return t.ptr=e,t}__destroy_into_raw(){const e=this.ptr;return this.ptr=0,e}free(){const e=this.__destroy_into_raw();a.__wbg_wpboard_free(e)}constructor(e,t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),i=m(e,a.__wbindgen_malloc,a.__wbindgen_realloc),_=h;a.wpboard_new(o,i,_,v(t)?16777215:t?1:0);var n=x()[o/4+0],r=x()[o/4+1];if(x()[o/4+2])throw b(r);return q.__wrap(n)}finally{a.__wbindgen_add_to_stack_pointer(16)}}play(e){try{const r=a.__wbindgen_add_to_stack_pointer(-16),o=m(e,a.__wbindgen_malloc,a.__wbindgen_realloc),i=h;a.wpboard_play(r,this.ptr,o,i);var t=x()[r/4+0],n=x()[r/4+1];if(x()[r/4+2])throw b(n);return q.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}moves(){try{const o=a.__wbindgen_add_to_stack_pointer(-16);a.wpboard_moves(o,this.ptr);var e=x()[o/4+0],t=x()[o/4+1],n=x()[o/4+2];if(x()[o/4+3])throw b(n);var r=S(e,t).slice();return a.__wbindgen_free(e,4*t),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}pieces(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.wpboard_pieces(r,this.ptr);var e=x()[r/4+0],t=x()[r/4+1],n=S(e,t).slice();return a.__wbindgen_free(e,4*t),n}finally{a.__wbindgen_add_to_stack_pointer(16)}}fen(e){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.wpboard_fen(r,this.ptr,v(e)?16777215:e?1:0);var t=x()[r/4+0],n=x()[r/4+1];return d(t,n)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,n)}}}function P(e,t){return p(new Error(d(e,t)))}function U(e,t){return p(d(e,t))}function I(e,t){return p(JSON.parse(d(e,t)))}function $(){return p(new Error)}function M(e,t){const n=m(l(t).stack,a.__wbindgen_malloc,a.__wbindgen_realloc),r=h;x()[e/4+1]=r,x()[e/4+0]=n}function B(e,t){try{console.error(d(e,t))}finally{a.__wbindgen_free(e,t)}}function L(e){b(e)}function D(e,t){throw new Error(d(e,t))}o()}catch(W){o(W)}}))},328:(e,t,n)=>{n.a(e,(async(r,o)=>{try{var a,i=r([a=n(798)]),[a]=i.then?(await i)():i;await n.v(t,e.id,"5428d9b90577bf1d09cf",{"./index_bg.js":{__wbindgen_error_new:a.hd,__wbindgen_string_new:a.h4,__wbindgen_json_parse:a.t$,__wbg_new_693216e109162396:a.Ih,__wbg_stack_0ddaca5d1abfb52f:a.yq,__wbg_error_09919627ac0992f5:a.gk,__wbindgen_object_drop_ref:a.ug,__wbindgen_throw:a.Or}}),o()}catch(e){o(e)}}),1)}},a={};function i(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={id:e,loaded:!1,exports:{}};return o[e](n,n.exports,i),n.loaded=!0,n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},i.a=(o,a,i)=>{var _;i&&((_=[]).d=1);var c,s,d,u=new Set,f=o.exports,p=new Promise(((e,t)=>{d=t,s=e}));p[t]=f,p[e]=e=>(_&&e(_),u.forEach(e),p.catch((e=>{}))),o.exports=p,a((o=>{var a;c=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[e])return o;if(o.then){var a=[];a.d=0,o.then((e=>{i[t]=e,r(a)}),(e=>{i[n]=e,r(a)}));var i={};return i[e]=e=>e(a),i}}var _={};return _[e]=e=>{},_[t]=o,_})))(o);var i=()=>c.map((e=>{if(e[n])throw e[n];return e[t]})),s=new Promise((t=>{(a=()=>t(i)).r=0;var n=e=>e!==_&&!u.has(e)&&(u.add(e),e&&!e.d&&(a.r++,e.push(a)));c.map((t=>t[e](n)))}));return a.r?s:i()}),(e=>(e?d(p[n]=e):s(f),r(_)))),_&&(_.d=0)},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.v=(e,t,n,r)=>{var o=fetch(i.p+""+n+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(o,r).then((t=>Object.assign(e,t.instance.exports))):o.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,r))).then((t=>Object.assign(e,t.instance.exports)))},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),i(448)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,