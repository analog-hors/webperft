(()=>{"use strict";var r,n,e,t,o={28:(r,n,e)=>{e.d(n,{Z:()=>c});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([r.id,'body {\r\n    --page-bg: #312833;\r\n    /* --window-bg: #4e9299; */\r\n    --window-bg: #9F81A2;\r\n    --overlay-col: rgba(0, 0, 0, 0.25);\r\n    --item-col: #5E4763;\r\n    --input-hover-col: #725679;\r\n    --input-active-col: #8B6994;\r\n    --input-disabled-col: #312833;\r\n    --font-col: #F9F5D7;\r\n    --scrollbar-col: #F4C8F9;\r\n    --scrollbar-bg: #1E1A21;\r\n    --scrollbar-hover: #C7A1CB;\r\n    --scrollbar-active: #785B7B;\r\n\r\n    --light-square-col: #8B6994;\r\n    --dark-square-col: #725679;\r\n    --from-square-col: #59aeb8;\r\n    --to-square-col: #70D5E0;\r\n\r\n    --move-col: #70D5E0;\r\n    --move-hover-col: #AAEBE8;\r\n\r\n    --diff-placeholder-col: #d2b4b9;\r\n    --diff-move: #F4C8F9;\r\n    --diff-incorrect: rgb(254, 128, 128);\r\n    --diff-correct: rgb(96, 233, 96);\r\n\r\n    background-color: var(--page-bg);\r\n    font-family: "Fira Mono", sans-serif;\r\n    color: var(--font-col);\r\n}\r\n\r\n#app {\r\n    --app-aspect-ratio: calc(18 / 10);\r\n    --scale: min(100vw / var(--app-aspect-ratio), 100vh);\r\n    --app-scale: calc(var(--scale) * 0.8);\r\n\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: calc(var(--app-scale) * var(--app-aspect-ratio));\r\n    height: calc(var(--app-scale));\r\n\r\n    display: grid;\r\n    grid-template-columns: [board-start] 2fr [info-start] 1fr [chess960-checkbox-start] 1fr [end];\r\n    grid-template-rows: [board-start] 1fr [depth-start] 1fr [info-start] 7fr [fen-start] 1fr [end];\r\n    padding: 0.5%;\r\n    gap: 0.5%;\r\n\r\n    background-color: var(--window-bg);\r\n}\r\n\r\n#board-container {\r\n    position: relative;\r\n    grid-column: board-start / info-start;\r\n    grid-row: board-start / fen-start;\r\n\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n#board {\r\n    position: absolute;\r\n\r\n    aspect-ratio: 1 / 1;\r\n    width: 100%;\r\n    height: auto;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n\r\n    background-color: var(--light-square-col);\r\n}\r\n\r\n#fen {\r\n    grid-column: board-start / info-start;\r\n    grid-row: fen-start / end;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.018);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n}\r\n\r\n#fen-selector {\r\n    grid-column: info-start / end;\r\n    grid-row: board-start / depth-start;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n}\r\n\r\n#depth-label {\r\n    grid-column: info-start / chess960-checkbox-start;\r\n    grid-row: depth-start / info-start;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n#depth {\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    flex-grow: 0.9;\r\n}\r\n\r\n#chess960-checkbox-container {\r\n    position: relative;\r\n    grid-column: chess960-checkbox-start / end;\r\n    grid-row: depth-start / info-start;\r\n}\r\n\r\n#chess960-checkbox {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    appearance: none;\r\n    cursor: pointer;\r\n}\r\n\r\n#chess960-checkbox + span {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    display: inline-grid;\r\n    align-items: center;\r\n    text-align: center;\r\n\r\n    background-color: var(--item-col);\r\n    font-size: calc(var(--scale) * 0.022);\r\n    \r\n    pointer-events: none;\r\n}\r\n\r\n#chess960-checkbox:checked + span {\r\n    background-color: var(--input-active-col);\r\n}\r\n\r\n#chess960-checkbox:checked + span:after {\r\n    content: "Chess960: Enabled";\r\n}\r\n\r\n#chess960-checkbox:not(:checked) + span:after {\r\n    content: "Chess960: Disabled";\r\n}\r\n\r\n#chess960-checkbox:hover + span {\r\n    background-color: var(--input-hover-col);\r\n}\r\n\r\n#info {\r\n    grid-column: info-start / end;\r\n    grid-row: info-start / fen-start;\r\n\r\n    overflow-y: scroll;\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.005);\r\n}\r\n\r\n#diff-button {\r\n    grid-column: info-start / end;\r\n    grid-row: fen-start / end;\r\n\r\n    cursor: pointer;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    border-radius: calc(var(--scale) * 0.02);\r\n    font-size: calc(var(--scale) * 0.04);\r\n}\r\n\r\n#diff-button:hover {\r\n    background-color: var(--input-hover-col);\r\n}\r\n\r\n#diff-button:active {\r\n    background-color: var(--input-active-col);\r\n}\r\n\r\n#diff-button:disabled {\r\n    cursor: not-allowed;\r\n    background-color: var(--input-disabled-col);\r\n}\r\n\r\n.calculating:after {\r\n    animation-duration: 1s;\r\n    animation-name: calculating;\r\n    animation-iteration-count: infinite;\r\n    animation-timing-function: linear;\r\n    display: inline-block;\r\n    content: "";\r\n}\r\n\r\n@keyframes calculating {\r\n    25% {\r\n        content: ".";\r\n    }\r\n\r\n    50% {\r\n        content: "..";\r\n    }\r\n  \r\n    75% {\r\n        content: "...";\r\n    }\r\n}\r\n\r\n.square {\r\n    position: absolute;\r\n    left: calc(var(--file) / 8 * 100%);\r\n    bottom: calc(var(--rank) / 8 * 100%);\r\n    width: calc(100% / 8);\r\n    height: calc(100% / 8);\r\n\r\n    font-size: calc(var(--scale) * 0.02);\r\n\r\n    background-color: var(--light-square-col);\r\n}\r\n\r\n.dark-square {\r\n    background-color: var(--dark-square-col);\r\n}\r\n\r\n.square:after {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: var(--piece, none);\r\n    background-size: cover;\r\n    content: "";\r\n}\r\n\r\n.from-square {\r\n    background-color: var(--from-square-col);\r\n}\r\n\r\n.to-square {\r\n    background-color: var(--to-square-col);\r\n}\r\n\r\n.file-char {\r\n    position: absolute;\r\n    bottom: 0;\r\n}\r\n\r\n.rank-char {\r\n    position: absolute;\r\n    right: 0;\r\n}\r\n\r\n.move {\r\n    cursor: pointer;\r\n    color: var(--move-col);\r\n}\r\n\r\n.move:hover {\r\n    color: var(--move-hover-col);\r\n}\r\n\r\n* {\r\n    scrollbar-color: var(--scrollbar-col) var(--scrollbar-bg);\r\n    scrollbar-width: thin;\r\n}\r\n\r\n/* Thanks, Chrome */\r\n@supports not ((scrollbar-color: var(--scrollbar-col) var(--scrollbar-bg)) and (scrollbar-width: thin)) {\r\n    ::-webkit-scrollbar {\r\n        background-color: var(--scrollbar-bg);\r\n        width: 5px;\r\n        height: 5px;\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: var(--scrollbar-col);\r\n        border-radius: 2px;\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background-color: var(--scrollbar-hover);\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb:active {\r\n        background-color: var(--scrollbar-active);\r\n    }\r\n}\r\n\r\n#diff-window-container {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    background-color: var(--overlay-col);\r\n\r\n    display: none;\r\n}\r\n\r\n#diff-window {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 90%;\r\n    height: 90%;\r\n    \r\n    display: grid;\r\n    grid-template-columns: [diff-input-start] 1fr [diff-result-start] 1fr [end];\r\n    grid-template-rows: [diff-labels-start] 1fr [diff-input-start] 8fr [diff-close-start] 1fr [end];\r\n    padding: 0.5%;\r\n    gap: 0.5%;\r\n\r\n    background-color: var(--window-bg);\r\n}\r\n\r\n#diff-input-label {\r\n    grid-column: diff-input-start / diff-result-start;\r\n    grid-row: diff-labels-start / diff-input-start;\r\n\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.03);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n#diff-result-label {\r\n    grid-column: diff-result-start / end;\r\n    grid-row: diff-labels-start / diff-input-start;\r\n\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.03);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n#diff-input {\r\n    grid-column: diff-input-start / diff-result-start;\r\n    grid-row: diff-input-start / diff-close-start;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.005);\r\n    margin: 0;\r\n}\r\n\r\n#diff-input::placeholder {\r\n    color: var(--diff-placeholder-col);\r\n}\r\n\r\n#diff-result {\r\n    grid-column: diff-result-start / end;\r\n    grid-row: diff-input-start / diff-close-start;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.005);\r\n}\r\n\r\n#diff-close {\r\n    grid-column: diff-input-start / end;\r\n    grid-row: diff-close-start / end;\r\n\r\n    cursor: pointer;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    border-radius: calc(var(--scale) * 0.02);\r\n    font-size: calc(var(--scale) * 0.04);\r\n}\r\n\r\n#diff-close:hover {\r\n    background-color: var(--input-hover-col);\r\n}\r\n\r\n#diff-close:active {\r\n    background-color: var(--input-active-col);\r\n}\r\n\r\n.diff-text-move {\r\n    color: var(--diff-move);\r\n}\r\n\r\n.diff-text-incorrect {\r\n    color: var(--diff-incorrect);\r\n}\r\n\r\n.diff-text-correct {\r\n    color: var(--diff-correct);\r\n}\r\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:['body {\r\n    --page-bg: #312833;\r\n    /* --window-bg: #4e9299; */\r\n    --window-bg: #9F81A2;\r\n    --overlay-col: rgba(0, 0, 0, 0.25);\r\n    --item-col: #5E4763;\r\n    --input-hover-col: #725679;\r\n    --input-active-col: #8B6994;\r\n    --input-disabled-col: #312833;\r\n    --font-col: #F9F5D7;\r\n    --scrollbar-col: #F4C8F9;\r\n    --scrollbar-bg: #1E1A21;\r\n    --scrollbar-hover: #C7A1CB;\r\n    --scrollbar-active: #785B7B;\r\n\r\n    --light-square-col: #8B6994;\r\n    --dark-square-col: #725679;\r\n    --from-square-col: #59aeb8;\r\n    --to-square-col: #70D5E0;\r\n\r\n    --move-col: #70D5E0;\r\n    --move-hover-col: #AAEBE8;\r\n\r\n    --diff-placeholder-col: #d2b4b9;\r\n    --diff-move: #F4C8F9;\r\n    --diff-incorrect: rgb(254, 128, 128);\r\n    --diff-correct: rgb(96, 233, 96);\r\n\r\n    background-color: var(--page-bg);\r\n    font-family: "Fira Mono", sans-serif;\r\n    color: var(--font-col);\r\n}\r\n\r\n#app {\r\n    --app-aspect-ratio: calc(18 / 10);\r\n    --scale: min(100vw / var(--app-aspect-ratio), 100vh);\r\n    --app-scale: calc(var(--scale) * 0.8);\r\n\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: calc(var(--app-scale) * var(--app-aspect-ratio));\r\n    height: calc(var(--app-scale));\r\n\r\n    display: grid;\r\n    grid-template-columns: [board-start] 2fr [info-start] 1fr [chess960-checkbox-start] 1fr [end];\r\n    grid-template-rows: [board-start] 1fr [depth-start] 1fr [info-start] 7fr [fen-start] 1fr [end];\r\n    padding: 0.5%;\r\n    gap: 0.5%;\r\n\r\n    background-color: var(--window-bg);\r\n}\r\n\r\n#board-container {\r\n    position: relative;\r\n    grid-column: board-start / info-start;\r\n    grid-row: board-start / fen-start;\r\n\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n#board {\r\n    position: absolute;\r\n\r\n    aspect-ratio: 1 / 1;\r\n    width: 100%;\r\n    height: auto;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n\r\n    background-color: var(--light-square-col);\r\n}\r\n\r\n#fen {\r\n    grid-column: board-start / info-start;\r\n    grid-row: fen-start / end;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.018);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n}\r\n\r\n#fen-selector {\r\n    grid-column: info-start / end;\r\n    grid-row: board-start / depth-start;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n}\r\n\r\n#depth-label {\r\n    grid-column: info-start / chess960-checkbox-start;\r\n    grid-row: depth-start / info-start;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n#depth {\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    flex-grow: 0.9;\r\n}\r\n\r\n#chess960-checkbox-container {\r\n    position: relative;\r\n    grid-column: chess960-checkbox-start / end;\r\n    grid-row: depth-start / info-start;\r\n}\r\n\r\n#chess960-checkbox {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    appearance: none;\r\n    cursor: pointer;\r\n}\r\n\r\n#chess960-checkbox + span {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    display: inline-grid;\r\n    align-items: center;\r\n    text-align: center;\r\n\r\n    background-color: var(--item-col);\r\n    font-size: calc(var(--scale) * 0.022);\r\n    \r\n    pointer-events: none;\r\n}\r\n\r\n#chess960-checkbox:checked + span {\r\n    background-color: var(--input-active-col);\r\n}\r\n\r\n#chess960-checkbox:checked + span:after {\r\n    content: "Chess960: Enabled";\r\n}\r\n\r\n#chess960-checkbox:not(:checked) + span:after {\r\n    content: "Chess960: Disabled";\r\n}\r\n\r\n#chess960-checkbox:hover + span {\r\n    background-color: var(--input-hover-col);\r\n}\r\n\r\n#info {\r\n    grid-column: info-start / end;\r\n    grid-row: info-start / fen-start;\r\n\r\n    overflow-y: scroll;\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.005);\r\n}\r\n\r\n#diff-button {\r\n    grid-column: info-start / end;\r\n    grid-row: fen-start / end;\r\n\r\n    cursor: pointer;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    border-radius: calc(var(--scale) * 0.02);\r\n    font-size: calc(var(--scale) * 0.04);\r\n}\r\n\r\n#diff-button:hover {\r\n    background-color: var(--input-hover-col);\r\n}\r\n\r\n#diff-button:active {\r\n    background-color: var(--input-active-col);\r\n}\r\n\r\n#diff-button:disabled {\r\n    cursor: not-allowed;\r\n    background-color: var(--input-disabled-col);\r\n}\r\n\r\n.calculating:after {\r\n    animation-duration: 1s;\r\n    animation-name: calculating;\r\n    animation-iteration-count: infinite;\r\n    animation-timing-function: linear;\r\n    display: inline-block;\r\n    content: "";\r\n}\r\n\r\n@keyframes calculating {\r\n    25% {\r\n        content: ".";\r\n    }\r\n\r\n    50% {\r\n        content: "..";\r\n    }\r\n  \r\n    75% {\r\n        content: "...";\r\n    }\r\n}\r\n\r\n.square {\r\n    position: absolute;\r\n    left: calc(var(--file) / 8 * 100%);\r\n    bottom: calc(var(--rank) / 8 * 100%);\r\n    width: calc(100% / 8);\r\n    height: calc(100% / 8);\r\n\r\n    font-size: calc(var(--scale) * 0.02);\r\n\r\n    background-color: var(--light-square-col);\r\n}\r\n\r\n.dark-square {\r\n    background-color: var(--dark-square-col);\r\n}\r\n\r\n.square:after {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: var(--piece, none);\r\n    background-size: cover;\r\n    content: "";\r\n}\r\n\r\n.from-square {\r\n    background-color: var(--from-square-col);\r\n}\r\n\r\n.to-square {\r\n    background-color: var(--to-square-col);\r\n}\r\n\r\n.file-char {\r\n    position: absolute;\r\n    bottom: 0;\r\n}\r\n\r\n.rank-char {\r\n    position: absolute;\r\n    right: 0;\r\n}\r\n\r\n.move {\r\n    cursor: pointer;\r\n    color: var(--move-col);\r\n}\r\n\r\n.move:hover {\r\n    color: var(--move-hover-col);\r\n}\r\n\r\n* {\r\n    scrollbar-color: var(--scrollbar-col) var(--scrollbar-bg);\r\n    scrollbar-width: thin;\r\n}\r\n\r\n/* Thanks, Chrome */\r\n@supports not ((scrollbar-color: var(--scrollbar-col) var(--scrollbar-bg)) and (scrollbar-width: thin)) {\r\n    ::-webkit-scrollbar {\r\n        background-color: var(--scrollbar-bg);\r\n        width: 5px;\r\n        height: 5px;\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: var(--scrollbar-col);\r\n        border-radius: 2px;\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background-color: var(--scrollbar-hover);\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb:active {\r\n        background-color: var(--scrollbar-active);\r\n    }\r\n}\r\n\r\n#diff-window-container {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    background-color: var(--overlay-col);\r\n\r\n    display: none;\r\n}\r\n\r\n#diff-window {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 90%;\r\n    height: 90%;\r\n    \r\n    display: grid;\r\n    grid-template-columns: [diff-input-start] 1fr [diff-result-start] 1fr [end];\r\n    grid-template-rows: [diff-labels-start] 1fr [diff-input-start] 8fr [diff-close-start] 1fr [end];\r\n    padding: 0.5%;\r\n    gap: 0.5%;\r\n\r\n    background-color: var(--window-bg);\r\n}\r\n\r\n#diff-input-label {\r\n    grid-column: diff-input-start / diff-result-start;\r\n    grid-row: diff-labels-start / diff-input-start;\r\n\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.03);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n#diff-result-label {\r\n    grid-column: diff-result-start / end;\r\n    grid-row: diff-labels-start / diff-input-start;\r\n\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.03);\r\n    padding-inline-start: calc(var(--scale) * 0.02);\r\n\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n#diff-input {\r\n    grid-column: diff-input-start / diff-result-start;\r\n    grid-row: diff-input-start / diff-close-start;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.005);\r\n    margin: 0;\r\n}\r\n\r\n#diff-input::placeholder {\r\n    color: var(--diff-placeholder-col);\r\n}\r\n\r\n#diff-result {\r\n    grid-column: diff-result-start / end;\r\n    grid-row: diff-input-start / diff-close-start;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    font-size: calc(var(--scale) * 0.022);\r\n    padding-inline-start: calc(var(--scale) * 0.005);\r\n}\r\n\r\n#diff-close {\r\n    grid-column: diff-input-start / end;\r\n    grid-row: diff-close-start / end;\r\n\r\n    cursor: pointer;\r\n\r\n    color: inherit;\r\n    font-family: inherit;\r\n    background-color: var(--item-col);\r\n    border-style: none;\r\n    border-radius: calc(var(--scale) * 0.02);\r\n    font-size: calc(var(--scale) * 0.04);\r\n}\r\n\r\n#diff-close:hover {\r\n    background-color: var(--input-hover-col);\r\n}\r\n\r\n#diff-close:active {\r\n    background-color: var(--input-active-col);\r\n}\r\n\r\n.diff-text-move {\r\n    color: var(--diff-move);\r\n}\r\n\r\n.diff-text-incorrect {\r\n    color: var(--diff-incorrect);\r\n}\r\n\r\n.diff-text-correct {\r\n    color: var(--diff-correct);\r\n}\r\n'],sourceRoot:""}]);const c=i},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<r.length;s++){var A=[].concat(r[s]);t&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},537:r=>{r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=e.sources.map((function(r){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(r," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},89:(r,n,e)=>{var t=e(379),o=e.n(t),a=e(795),i=e.n(a),c=e(569),l=e.n(c),s=e(565),A=e.n(s),d=e(216),f=e.n(d),u=e(589),C=e.n(u),p=e(28),b={};b.styleTagTransform=C(),b.setAttributes=A(),b.insert=l().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=f(),o()(p.Z,b),p.Z&&p.Z.locals&&p.Z.locals},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var a={},i=[],c=0;c<r.length;c++){var l=r[c],s=t.base?l[0]+t.base:l[0],A=a[s]||0,d="".concat(s," ").concat(A);a[s]=A+1;var f=e(d),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)n[f].references++,n[f].updater(u);else{var C=o(u,t);t.byIndex=c,n.splice(c,0,{identifier:d,updater:C,references:1})}i.push(d)}return i}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var a=t(r=r||[],o=o||{});return function(r){r=r||[];for(var i=0;i<a.length;i++){var c=e(a[i]);n[c].references--}for(var l=t(r,o),s=0;s<a.length;s++){var A=e(a[s]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=l}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}},752:(r,n,e)=>{e.a(r,(async(r,n)=>{try{e(89);var t=e(115),o=e(798),a=e(925),i=r([a,o]);[a,o]=i.then?(await i)():i;const c=document.getElementById("board"),l=document.getElementById("fen"),s=document.getElementById("fen-selector"),A=document.getElementById("depth"),d=document.getElementById("chess960-checkbox"),f=document.getElementById("info"),u=document.getElementById("diff-button"),C=document.getElementById("diff-window-container"),p=document.getElementById("diff-input"),b=document.getElementById("diff-result"),h=document.getElementById("diff-close"),g=()=>d.checked;for(const r of s.getElementsByClassName("chess960-position"))g()?r.removeAttribute("disabled"):r.setAttribute("disabled","");let v=parseInt(A.value,10),m="custom"!==s.value?s.value:l.value,I=new o.kP(m,g());const B=new t.Z(c);B.set(I),l.value=m;let w=[],y=null;const k=()=>{return r=void 0,n=void 0,t=function*(){var r;null!==y&&y();const n=document.createElement("span");n.innerText="Calculating",n.classList.add("calculating"),f.replaceChildren(n),u.disabled=!0;const e={fen:m,depth:v,chess960:g()},[t,o]=(0,a.C)(e.fen,e.depth,e.chess960,null!==(r=navigator.hardwareConcurrency)&&void 0!==r?r:1);y=o;const i=yield t;if(null===i||e.fen!==m||e.depth!==v||e.chess960!==g())return;w=i,f.replaceChildren();let c=BigInt(0);const l=document.createElement("span");f.appendChild(l);for(const{move:r,normalizedMove:n,leaves:e}of w){const t=document.createElement("span"),o=document.createElement("span");f.appendChild(document.createElement("br")),f.appendChild(t),f.appendChild(o);const a=n.slice(0,2),i=n.slice(2,4),l=()=>{B.squares.get(a).classList.add("from-square"),B.squares.get(i).classList.add("to-square")},d=()=>{B.squares.get(a).classList.remove("from-square"),B.squares.get(i).classList.remove("to-square")};t.classList.add("move"),t.innerText=n,t.addEventListener("mouseenter",l),t.addEventListener("mouseleave",d),t.addEventListener("click",(()=>{d();const n=parseInt(A.min,10);v>n&&(v-=1,A.value=v.toString());const e=I.play(r);_(e.fen(g())),s.value="custom",e.free()})),o.innerText=` - ${e}`,c+=e}l.innerText=`Total: ${c}`,u.disabled=!1},new((e=void 0)||(e=Promise))((function(o,a){function i(r){try{l(t.next(r))}catch(r){a(r)}}function c(r){try{l(t.throw(r))}catch(r){a(r)}}function l(r){var n;r.done?o(r.value):(n=r.value,n instanceof e?n:new e((function(r){r(n)}))).then(i,c)}l((t=t.apply(r,n||[])).next())}));var r,n,e,t};k();const _=r=>{const n=new o.kP(r,g());I.free(),I=n,m=r,l.value=m,B.set(I),k()},E=()=>{s.value="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",_(s.value)};l.addEventListener("change",(()=>{try{_(l.value),s.value="custom"}catch(r){l.value=m,l.setCustomValidity(r.toString()),l.reportValidity(),l.setCustomValidity("")}})),s.addEventListener("change",(()=>{_(s.value)})),A.addEventListener("change",(()=>{let r=parseInt(A.value,10);isNaN(r)&&(r=v);const n=parseInt(A.min,10),e=parseInt(A.max,10);r=Math.max(r,n),r=Math.min(r,e),v!==r&&(v=r,k()),A.value=v.toString()})),d.addEventListener("change",(()=>{for(const r of s.getElementsByClassName("chess960-position"))g()?r.removeAttribute("disabled"):r.setAttribute("disabled","");E()})),u.addEventListener("click",(()=>{p.value="",b.replaceChildren(),C.style.display="unset"})),h.addEventListener("click",(()=>{C.style.display=""})),p.addEventListener("change",(()=>{b.replaceChildren();const r=(...r)=>{for(const n of r)if("string"==typeof n)b.append(n);else{const[r,e]=n,t=document.createElement("span");t.innerText=r,t.classList.add(`diff-text-${e}`),b.appendChild(t)}b.appendChild(document.createElement("br"))},n=new Set;for(let e of p.value.split("\n")){if(e=e.trim(),0===e.length)continue;const t=/[a-zA-Z0-9]+/.exec(e);if(null===t||0===t.length){r(`Failed to find move in "${e}"`);continue}const o=t[0].toLowerCase(),a=w.find((r=>o===r.normalizedMove));if(void 0===a){r("Move ",[o,"incorrect"]," is illegal or invalid");continue}if(n.has(o)){r("Duplicate move ",[o,"move"]);continue}n.add(o);const i=/[0-9]+/.exec(e.slice(t.index+o.length));if(null===i||0===i.length){r(`Failed to find node count in "${e}"`);continue}const c=BigInt(i[0]);c===a.leaves||r([o,"move"]," - ",[c.toString(),"incorrect"]," should have ",[a.leaves.toString(),"correct"]," leaves")}for(const{normalizedMove:e}of w)n.has(e)||r("Missing move ",[e,"move"])})),n()}catch(r){n(r)}}))},115:(r,n,e)=>{e.d(n,{Z:()=>t});class t{constructor(r){this.squares=new Map;for(let n=0;n<8;n++){const e="abcdefgh"[n];for(let t=0;t<8;t++){const o=(t+1).toString(),a=document.createElement("div");if(a.classList.add("square"),a.style.setProperty("--file",n.toString()),a.style.setProperty("--rank",t.toString()),n%2==t%2&&a.classList.add("dark-square"),"1"===o){const r=document.createElement("span");r.classList.add("file-char"),r.innerText=e,a.appendChild(r)}if("h"===e){const r=document.createElement("span");r.classList.add("rank-char"),r.innerText=o,a.appendChild(r)}this.squares.set(e+o,a),r.appendChild(a)}}}set(r){for(const r of this.squares.values())r.style.removeProperty("--piece");const n=r.pieces();for(const{color:r,piece:e,square:t}of n)this.squares.get(t).style.setProperty("--piece",`url(./static/pieces/${r}${e.toUpperCase()}.svg)`)}}},925:(r,n,e)=>{e.a(r,(async(r,t)=>{try{e.d(n,{C:()=>l});var o=e(798),a=r([o]);o=(a.then?(await a)():a)[0];var i=function(r,n,e,t){return new(e||(e=Promise))((function(o,a){function i(r){try{l(t.next(r))}catch(r){a(r)}}function c(r){try{l(t.throw(r))}catch(r){a(r)}}function l(r){var n;r.done?o(r.value):(n=r.value,n instanceof e?n:new e((function(r){r(n)}))).then(i,c)}l((t=t.apply(r,n||[])).next())}))};function c(r){return new Promise(((n,e)=>{r.onmessage=e=>{r.onmessage=null,n(e.data)}}))}function l(r,n,e,t){let o=null;return[s(r,n,e,t,new Promise(((r,n)=>o=r))),o]}function s(r,n,t,a,l){return i(this,void 0,void 0,(function*(){const s=new o.kP(r,t),d=s.moves(),f=[],u=yield Promise.all(Array(a).fill(null).map((()=>new Promise(((r,n)=>{const t=new Worker(new URL(e.p+e.u(448),e.b));t.onmessage=()=>{t.onmessage=null,r(t)}}))))),C=Promise.all(u.map((r=>i(this,void 0,void 0,(function*(){for(;d.length>0;){const e=d.pop(),a=s.play(e),i={fen:a.fen(t),depth:n-1,chess960:t};a.free(),r.postMessage(i);const l=yield c(r),A=t?e:(0,o.r_)(s,e);f.push({move:e,normalizedMove:A,leaves:l})}}))))).then((r=>"success")),p=yield Promise.race([C,l]);for(const r of u)r.terminate();return f.sort(((r,n)=>A(r.normalizedMove,n.normalizedMove))),"success"===p?f:null}))}const A=(r,n)=>r>n?1:r<n?-1:0;t()}catch(d){t(d)}}))},798:(r,n,e)=>{e.a(r,(async(t,o)=>{try{e.d(n,{Ih:()=>z,Or:()=>L,gk:()=>M,h4:()=>D,hd:()=>S,kP:()=>q,r_:()=>x,t$:()=>j,ug:()=>T,yq:()=>P});var a=e(328);r=e.hmd(r);var i=t([a]);a=(i.then?(await i)():i)[0];let c=new("undefined"==typeof TextDecoder?(0,r.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});c.decode();let l=new Uint8Array;function s(){return 0===l.byteLength&&(l=new Uint8Array(a.memory.buffer)),l}function A(r,n){return c.decode(s().subarray(r,r+n))}const d=new Array(32).fill(void 0);d.push(void 0,null,!0,!1);let f=d.length;function u(r){f===d.length&&d.push(d.length+1);const n=f;return f=d[n],d[n]=r,n}function C(r){return d[r]}function p(r){r<36||(d[r]=f,f=r)}function b(r){const n=C(r);return p(r),n}let h=0,g=new("undefined"==typeof TextEncoder?(0,r.require)("util").TextEncoder:TextEncoder)("utf-8");const v="function"==typeof g.encodeInto?function(r,n){return g.encodeInto(r,n)}:function(r,n){const e=g.encode(r);return n.set(e),{read:r.length,written:e.length}};function m(r,n,e){if(void 0===e){const e=g.encode(r),t=n(e.length);return s().subarray(t,t+e.length).set(e),h=e.length,t}let t=r.length,o=n(t);const a=s();let i=0;for(;i<t;i++){const n=r.charCodeAt(i);if(n>127)break;a[o+i]=n}if(i!==t){0!==i&&(r=r.slice(i)),o=e(o,t,t=i+3*r.length);const n=s().subarray(o+i,o+t);i+=v(r,n).written}return h=i,o}function I(r){return null==r}let B=new Int32Array;function w(){return 0===B.byteLength&&(B=new Int32Array(a.memory.buffer)),B}let y=new Uint32Array;function k(r,n){const e=(0===y.byteLength&&(y=new Uint32Array(a.memory.buffer)),y).subarray(r/4,r/4+n),t=[];for(let r=0;r<e.length;r++)t.push(b(e[r]));return t}function _(r,n){if(!(r instanceof n))throw new Error(`expected instance of ${n.name}`);return r.ptr}const E=new Uint32Array(2);function x(r,n){try{const s=a.__wbindgen_add_to_stack_pointer(-16);_(r,q);const d=m(n,a.__wbindgen_malloc,a.__wbindgen_realloc),f=h;a.chess960_move_to_standard(s,r.ptr,d,f);var e=w()[s/4+0],t=w()[s/4+1],o=w()[s/4+2],i=w()[s/4+3],c=e,l=t;if(i)throw c=0,l=0,b(o);return A(c,l)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(c,l)}}new BigUint64Array(E.buffer);class q{static __wrap(r){const n=Object.create(q.prototype);return n.ptr=r,n}__destroy_into_raw(){const r=this.ptr;return this.ptr=0,r}free(){const r=this.__destroy_into_raw();a.__wbg_wpboard_free(r)}constructor(r,n){try{const o=a.__wbindgen_add_to_stack_pointer(-16),i=m(r,a.__wbindgen_malloc,a.__wbindgen_realloc),c=h;a.wpboard_new(o,i,c,I(n)?16777215:n?1:0);var e=w()[o/4+0],t=w()[o/4+1];if(w()[o/4+2])throw b(t);return q.__wrap(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}play(r){try{const t=a.__wbindgen_add_to_stack_pointer(-16),o=m(r,a.__wbindgen_malloc,a.__wbindgen_realloc),i=h;a.wpboard_play(t,this.ptr,o,i);var n=w()[t/4+0],e=w()[t/4+1];if(w()[t/4+2])throw b(e);return q.__wrap(n)}finally{a.__wbindgen_add_to_stack_pointer(16)}}moves(){try{const o=a.__wbindgen_add_to_stack_pointer(-16);a.wpboard_moves(o,this.ptr);var r=w()[o/4+0],n=w()[o/4+1],e=w()[o/4+2];if(w()[o/4+3])throw b(e);var t=k(r,n).slice();return a.__wbindgen_free(r,4*n),t}finally{a.__wbindgen_add_to_stack_pointer(16)}}pieces(){try{const t=a.__wbindgen_add_to_stack_pointer(-16);a.wpboard_pieces(t,this.ptr);var r=w()[t/4+0],n=w()[t/4+1],e=k(r,n).slice();return a.__wbindgen_free(r,4*n),e}finally{a.__wbindgen_add_to_stack_pointer(16)}}fen(r){try{const t=a.__wbindgen_add_to_stack_pointer(-16);a.wpboard_fen(t,this.ptr,I(r)?16777215:r?1:0);var n=w()[t/4+0],e=w()[t/4+1];return A(n,e)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,e)}}}function S(r,n){return u(new Error(A(r,n)))}function D(r,n){return u(A(r,n))}function j(r,n){return u(JSON.parse(A(r,n)))}function z(){return u(new Error)}function P(r,n){const e=m(C(n).stack,a.__wbindgen_malloc,a.__wbindgen_realloc),t=h;w()[r/4+1]=t,w()[r/4+0]=e}function M(r,n){try{console.error(A(r,n))}finally{a.__wbindgen_free(r,n)}}function T(r){b(r)}function L(r,n){throw new Error(A(r,n))}o()}catch(F){o(F)}}))},328:(r,n,e)=>{e.a(r,(async(t,o)=>{try{var a,i=t([a=e(798)]),[a]=i.then?(await i)():i;await e.v(n,r.id,"eac0097751f619ccf8e6",{"./index_bg.js":{__wbindgen_error_new:a.hd,__wbindgen_string_new:a.h4,__wbindgen_json_parse:a.t$,__wbg_new_693216e109162396:a.Ih,__wbg_stack_0ddaca5d1abfb52f:a.yq,__wbg_error_09919627ac0992f5:a.gk,__wbindgen_object_drop_ref:a.ug,__wbindgen_throw:a.Or}}),o()}catch(r){o(r)}}),1)}},a={};function i(r){var n=a[r];if(void 0!==n)return n.exports;var e=a[r]={id:r,loaded:!1,exports:{}};return o[r](e,e.exports,i),e.loaded=!0,e.exports}i.m=o,r="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",n="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",e="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",t=r=>{r&&!r.d&&(r.d=1,r.forEach((r=>r.r--)),r.forEach((r=>r.r--?r.r++:r())))},i.a=(o,a,i)=>{var c;i&&((c=[]).d=1);var l,s,A,d=new Set,f=o.exports,u=new Promise(((r,n)=>{A=n,s=r}));u[n]=f,u[r]=r=>(c&&r(c),d.forEach(r),u.catch((r=>{}))),o.exports=u,a((o=>{var a;l=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[r])return o;if(o.then){var a=[];a.d=0,o.then((r=>{i[n]=r,t(a)}),(r=>{i[e]=r,t(a)}));var i={};return i[r]=r=>r(a),i}}var c={};return c[r]=r=>{},c[n]=o,c})))(o);var i=()=>l.map((r=>{if(r[e])throw r[e];return r[n]})),s=new Promise((n=>{(a=()=>n(i)).r=0;var e=r=>r!==c&&!d.has(r)&&(d.add(r),r&&!r.d&&(a.r++,r.push(a)));l.map((n=>n[r](e)))}));return a.r?s:i()}),(r=>(r?A(u[e]=r):s(f),t(c)))),c&&(c.d=0)},i.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return i.d(n,{a:n}),n},i.d=(r,n)=>{for(var e in n)i.o(n,e)&&!i.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:n[e]})},i.u=r=>r+".js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),i.hmd=r=>((r=Object.create(r)).children||(r.children=[]),Object.defineProperty(r,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+r.id)}}),r),i.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),i.v=(r,n,e,t)=>{var o=fetch(i.p+""+e+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(o,t).then((n=>Object.assign(r,n.instance.exports))):o.then((r=>r.arrayBuffer())).then((r=>WebAssembly.instantiate(r,t))).then((n=>Object.assign(r,n.instance.exports)))},(()=>{var r;i.g.importScripts&&(r=i.g.location+"");var n=i.g.document;if(!r&&n&&(n.currentScript&&(r=n.currentScript.src),!r)){var e=n.getElementsByTagName("script");e.length&&(r=e[e.length-1].src)}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=r})(),i.b=document.baseURI||self.location.href,i.nc=void 0,i(752)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,